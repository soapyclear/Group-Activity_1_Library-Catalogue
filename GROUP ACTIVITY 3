#include <iostream>
#include <string>
#include <vector>
#include <map>
using namespace std;

struct Employee {
    int id;
    string name;
    int age;
    string position;
    double dailyRate;
    double totalDeductions;
};

vector<Employee> employees;

//function to add employees
void addEmployee() {
    Employee emp;
    
    cout << "Enter Employee ID: ";
    cin >> emp.id;
    
    cout << "Enter Employee Name: ";
    cin.ignore();
    getline(cin, emp.name);
    
    cout << "Enter Employee Age: ";
    cin >> emp.age;
    
    cout << "Enter Employee Position: ";
    cin.ignore();
    getline(cin, emp.position);
    
    cout << "Enter Daily Rate: ";
    cin >> emp.dailyRate;
    
    employees.push_back(emp);
    cout << "Employee added successfully!" << endl;
}

struct Payroll {
    string period;
    int hours;
    int overtime;
    int dailyRate;
    
};

void computePayroll() {
    Payroll prl;
    
    cout << "Input payroll period: ";
    cin.ignore();
    getline(cin,prl.period);
    
    cout << "Input total hours worked: ";
    cin >> prl.hours;
    
    cout << "Input daily rate: ";
    cin >> prl.dailyRate;
    
    cout << "Input overtime (hours):";
    cin >> prl.overtime; 
    
    cout << "Payroll: (Daily Rate / Hours) + Overtime";
    cout << "Payroll: " << prl.dailyRate / prl.hours + prl.overtime * 0.3;
    
}

// Function to edit deductions
void editDeductions(Deductions& deductions, const vector<Employee>& employees) {
    int editChoice;
    cout << "Edit Deductions:" << endl;
    cout << "1. Edit deductions individually" << endl;
    cout << "2. Edit deductions as a group" << endl;
    cout << "Enter your choice: ";
    cin >> editChoice;

    if (editChoice == 1) {
        int empID;
        cout << "Enter Employee ID: ";
        cin >> empID;

        double deduction;
        cout << "Enter Individual Deduction: ";
        cin >> deduction;
        deductions.individualDeductions[empID] = deduction;
    } else if (editChoice == 2) {
        double deduction;
        cout << "Enter Common Deduction for All Employees: ";
        cin >> deduction;
        // Clear existing individual deductions
        deductions.individualDeductions.clear();
        for (size_t i = 0; i < employees.size(); ++i) {
            deductions.individualDeductions[employees[i].id] = deduction;
        }
    } else {
        cout << "Invalid choice." << endl;
    }
}

//function to delete deduction
void delete_deduction() {
    int ID_temp;
    cout << "Enter ID to delete deduction: ";
    cin >> ID_temp;
		    
	int found = -1;
	for (int i = 0; i < employees.size(); i++) {
	    if (ID_temp == employees.at(i).id) {
	        found = i;
	    }
	}
		
    if (found > -1) {   /// determain if that id excist
        cout << "Are you sure you want to delete deduction? (Y/N): ";
        char fd;
        cin >> fd;

        if (fd == 'Y' || fd == 'y') {
            cout << "Deleting......." << endl;
            employees.at(found).totalDeductions = {0}; // Set deductions to zero
            cout << "Successfully Deleted..." << endl;
        }
    } else {
        cout << "Access denied, invalid ID" << endl;
    }
}

int main() {

    do {
        cout << "Main Menu:" << endl;
        cout << "1. Add employees" << endl;
        cout << "2. View employees" << endl;
        cout << "3. Edit deductions" << endl;
        cout << "4. Delete deductions" << endl;
        cout << "5. Payroll" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                addEmployee();
                break;
            }
            case 2: {
       			void employee :: show_emp_details()
{
	cout<<"\n\n**** Details of  Employee ****";
	cout<<"\nEmployee Name      :  "<<emp_name;
	cout<<"\nEmployee age    :  "<<emp_age;
	cout<<"\nBasic salary       :  "<<emp_basic;
	cout<<"\nEmployee ID        :  "<<emp_id;
	cout<<"\nIncome Tax         :  "<<emp_it;
	cout<<"\nNet Salary         :  "<<find_net_salary(emp_basic, emp_da, emp_it);
	cout<<"\n-------------------------------\n\n";
}


int main()
{
    employee emp;
    
    emp.get_emp_details();
    emp.show_emp_details();

    		}
            case 3: {
                editDeductions(deductions, employees);
                break;
            }
            case 4: {
                delete_deduction();
		break;
            }
            case 5: {
               computePayroll ();
                break;
            }
            case 6: {
               
            }
            default: {
                cout << "\nInvalid choice. Please try again." << endl;
                break;
            }
        }

    } while (choice != 6);

    return 0;
}
